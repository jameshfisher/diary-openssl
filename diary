#!/bin/bash
set -ue
db_dir=~/.diary
entries_dir="${db_dir}/entries"
priv_key_path="${db_dir}/priv.pem"
pub_key_path="${db_dir}/pub.pem"
program_name=$(basename "${0}")
function usage {
  echo "Usage:"
  echo "  ${program_name} init                                Initialize the database"
  echo "  ${program_name} write                               Write a diary entry"
  echo "  ${program_name} read <entry_dir> <entry_dir>...     Read the specified entries"
  echo "  ${program_name} export-jekyll-stats <target-dir>    Export stats to Jekyll posts"
  exit 1
}
if [ "$#" -lt 1 ]; then usage; fi
case "${1}" in
  init )
    if [ -e "${db_dir}"      ]; then echo "${db_dir} already exists"; exit 1; fi
    if [ -e "${priv_key_path}" ]; then echo "Refusing to overwrite ${priv_key_path}"; exit 1; fi
    if [ -e "${pub_key_path}"  ]; then echo "Refusing to overwrite ${pub_key_path}";  exit 1; fi
    read -s -p "Password to encrypt private key: " password; echo
    mkdir "${db_dir}"
    mkdir "${entries_dir}"
    cd "${db_dir}"
    git init
    openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 \
      | PASSWORD="${password}" openssl pkey -passout env:PASSWORD > "${priv_key_path}"
    PASSWORD="${password}" < "${priv_key_path}" openssl pkey -passin env:PASSWORD -pubout > "${pub_key_path}"
    git add "${priv_key_path}" "${pub_key_path}"
    git commit -m "New keypair for diary"
    echo "Initialized diary DB in ${db_dir}"
    ;;
  write )
    if ! [ -e "${pub_key_path}" ]; then echo "No ${pub_key_path}. Maybe run '${0} init'?"; exit 1; fi
    entry_id="$(date -u "+%Y-%m-%dT%H:%M:%SZ")"
    entry_dir="${entries_dir}/${entry_id}"
    secret="$(openssl rand 32 | base64)"
    mkdir "${entry_dir}"
    stty -echo
    echo "Start writing. EOF (Ctrl-D) finishes the entry."
    SECRET="${secret}" < /dev/stdin openssl enc -AES-256-CBC -pass env:SECRET > "${entry_dir}/ciphertext"
    stty echo
    <<< "${secret}" openssl pkeyutl -encrypt -pubin -inkey "${pub_key_path}" > "${entry_dir}/secret"
    cd "${db_dir}"
    git add "${entry_dir}"
    git commit -m "${entry_id}"
    echo "Written encrypted entry to ${entry_dir}/"
    if git remote | grep '^origin$'; then
      echo "Pushing to $(git remote get-url origin) ..."
      git push origin
    fi
    ;;
  read )
    read -s -p "Password to decrypt private key: " password; echo
    {
      for ((i = 2; i <= $#; i++)); do
        entry_dir="${!i}"
        secret="$( PASSWORD="${password}" < "${entry_dir}/secret" openssl pkeyutl -decrypt -inkey "${priv_key_path}" -passin env:PASSWORD )"
        echo "${!i}"
        SECRET="${secret}" < "${entry_dir}/ciphertext" openssl enc -d -AES-256-CBC -pass env:SECRET | fold | sed -e 's/^/    /'
      done
    } | less
    ;;
  export-jekyll-stats )
    if [ "$#" -lt 2 ]; then usage; fi
    declare -i num_chars
    for entry in $(ls "${entries_dir}"); do
      entry_dir="${entries_dir}/${entry}"
      post_name="$(sed 's/T/-diary-entry-/' <<< "${entry}")"
      stats_filepath="${2}/${post_name}.md"
      echo $stats_filepath
      num_chars="$(wc -c < "${entry_dir}/ciphertext")"
      echo "---
diary: true
word_count: $((${num_chars} / 5))
draft: true
---" > "${stats_filepath}"
    done
    ;;
  * )
    usage
    ;;
esac
